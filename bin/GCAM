#!/usr/bin/env python

"""Description: GCAM v1 main executable.

Copyright (c) 2015 Peeyush Sahu <peeyush.sahu@imt.uni-marburg.de>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status: release candidate
@version: $Id$
@author:  Peeyush Sahu
@contact: peeyush.sahu@imt.uni-marburg.de
"""


import timeit, sys
from PubmedSearch import Fetch_pmids
from PubmedSearch import Occurrence
from PubmedSearch import FilesFolders
from PubmedSearch import SignificanceTesting
from PubmedSearch import ExpressionAnalysis


__author__ = 'peeyush'


def main():
    tstart = timeit.default_timer()
    save_location = '/home/peeyush/Desktop'
    FilesFolders.create_folders(save_location)
    #genenames = ['aatf', 'prmt6', 'ski', 'cd44']
    genenames = FilesFolders.get_genes('/home/peeyush/Desktop/genes.txt')
    genenames = genenames
    primarygene = genenames
    subquery = None
    synonym = False
    organism = 'human'
    annDB = FilesFolders.read_database('/home/peeyush/NetBeansProjects/GCAM-1.0/resources')
    cellDB = FilesFolders.celltype_DB('/home/peeyush/NetBeansProjects/GCAM-1.0/resources')
    cellSyn = FilesFolders.cell_synonym('/home/peeyush/NetBeansProjects/GCAM-1.0/resources')

    if synonym:
        geneSyn = FilesFolders.gene_synonym('/home/peeyush/NetBeansProjects/GCAM-1.0/resources', organism)
        genenames = Occurrence.gene2synonym(genenames, geneSyn)
        print 'Gene count after synonym:', len(genenames)

    occuDF = cellDB
    fetch_time = 0
    occu_time = 0
    total_abstract = 0
    abs_in_DB = 0
    for gene in genenames:
        fstart = timeit.default_timer()
        GeneObj = Fetch_pmids.Genes(gene)
        GeneObj.get_pmids()
        fstop = timeit.default_timer()
        fetch_time = fetch_time + (fstop - fstart)
        total_abstract += len(GeneObj.pmids) # calcuate total no of abstracts

        ostart = timeit.default_timer()
        GeneObj.get_pmid_pos(annoDB=annDB)
        abs_in_DB += len(GeneObj.cellinpmid)
        occuDF = GeneObj.get_occurrence(cellDB=occuDF)
        ostop = timeit.default_timer()
        occu_time = occu_time + (ostop - ostart)

    cellOccu = Occurrence.joincellsynonym(occuDF, cellSyn)
    if synonym:
        cellOccu = Occurrence.joingenesynonym(cellOccu, primarygene, geneSyn)
    cellOccu = cellOccu.set_index(cellOccu['celltype'])
    cellOccu = cellOccu.drop(['celltype'], axis=1)
    cellOccu.to_csv(save_location+'/GCAM_output/GCAM_python_occurrence.csv', sep=',', encoding='utf-8', ignore_index=True)
    del annDB, cellDB, cellSyn

    ###### Scale df for heatmap
    significanceDF = SignificanceTesting.SignificanceObject(cellOccu)
    significanceDF.heatmapdf_create()
    significanceDF.heatmapdf.to_csv(save_location+'/GCAM_output/GCAM_python_final_occurrence.csv', sep=',', encoding='utf-8', ignore_index=True)
    significanceDF.fisher_occurrence_test()
    significanceDF.pvaldf.to_csv(save_location+'/GCAM_output/GCAM_python_final_pval.csv', sep=',', encoding='utf-8', ignore_index=True)
    significanceDF.adjpvaldf.to_csv(save_location+'/GCAM_output/GCAM_python_final_adjpval.csv', sep=',', encoding='utf-8', ignore_index=True)
    significanceDF.cellgenedf.to_csv(save_location+'/GCAM_output/GCAM_python_final_cellGene.csv', sep=',', encoding='utf-8', ignore_index=True)
    significanceDF.sigCelltypedf.to_csv(save_location+'/GCAM_output/GCAM_python_final_SigCelltypes.csv', sep=',', encoding='utf-8', ignore_index=True)
    significanceDF.plot_heatmap(save_location)


    ###### Expression analysis of celltype
    expressiondf = FilesFolders.read_expression_file('/home/peeyush/Desktop/GCAM_expression.csv')

    expObj = ExpressionAnalysis.ExpressionData(expressiondf)
    expObj.celltype_expression(significanceDF.sigCelltypedf, significanceDF.cellgenedf, save_location)
    expObj.plotdf.to_csv(save_location+'/GCAM_output/GCAM_python_final_celltype_vs_expression.csv', sep=',', encoding='utf-8', ignore_index=True)

    tstop = timeit.default_timer()
    print 'Total no. of genes: ', len(genenames)
    print 'Total no. of abstarcts: ', total_abstract
    print 'Total no. of abstarcts annotated in DB:', abs_in_DB
    print 'Total time elapsed: ', (tstop-tstart), ' sec'
    print 'Total time for pmid fetch: ', fetch_time, ' sec'
    print 'Total time for occurrence analysis: ', occu_time, ' sec'

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interruption! :D Bye!\n")
        sys.exit(0)