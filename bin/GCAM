#!/usr/bin/env python

"""Description: GCAM v1 main executable.

Copyright (c) 2015 Peeyush Sahu <peeyush.sahu@imt.uni-marburg.de>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status: release candidate
@version: $Id$
@author:  Peeyush Sahu
@contact: peeyush.sahu@imt.uni-marburg.de
"""


import sys
from GCAM import analysis

__author__ = 'peeyush'


def main():
    '''
    The main function for GCAM.
    :return:
    '''
    argparser = arg_parser()
    args = argparser.parse_args()
    import pkg_resources
    foo_config = pkg_resources.resource_exists('GCAM', 'resources/cellTypes.csv')
    print type(foo_config)
    print 'pkg_resource:',foo_config
    print pkg_resources.cleanup_resources(force=False)
    ### Calling GCAM analysis function with command line arguments
    analysis.gcam_analysis(args)




def arg_parser():
    '''
    Creating parser objects.
    :return:
    '''
    import argparse
    description = "%(prog) -- A Gene Celltype Association Mining analysis"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--version", action="version", version="%(prog)s 1.0.0")
    subparsers = parser.add_subparsers(dest='subcommand_name')
    # command for 'genebased'
    add_genebased_parser(subparsers)
    # command for 'expressionbased'
    add_expressionbased_parser(subparsers)
    return parser


def add_genebased_parser(parser):
    '''
    Add argument parser for GCAM analysis with only gene list.
    :param parser:
    :return:
    '''
    argparser_genebased = parser.add_parser("genebased", help="Main GCAM Function: perform analysis independent of expression data.")
    group_input = argparser_genebased.add_argument_group("Input files arguments")

    group_input.add_argument("--outdir", dest="outdir", type=str, required=True,
                             help = "If specified all output files will be written to that directory. Default: the current working directory")
    group_input.add_argument("--path", type=str, dest="path", required=True,
                             help="file path to gene names")
    group_input.add_argument("--subquery", type=str, dest="subquery", default=None,
                             help="additional search term with gene name to select specific abstracts")
    group_input.add_argument("--synonym", type=bool, default=False, dest="synonym", choices=[True, False],
                             help="If want to consider synonyms for query genes, default=False (False or True)")
    group_input.add_argument("--organism", type=str, default='human', dest="org", choices=['human', 'mouse'],
                             help="If synonym is 1, name of organism (human or mouse), default=human")


def add_expressionbased_parser(parser):
    '''
    Add argument parser for GCAM analysis with gene list and expression data.
    :param parser:
    :return:
    '''
    argparser_exprbased = parser.add_parser("exprbased", help="GCAM Function: perform analysis dependent of expression data.")
    group_input = argparser_exprbased.add_argument_group("Input files arguments")

    group_input.add_argument("--outdir", dest="outdir", type=str, required=True,
                             help = "If specified all output files will be written to that directory. Default: the current working directory")
    group_input.add_argument("--path", type=str, dest="path", required=True,
                             help="file path to gene names")
    group_input.add_argument("--exppath", type=str, dest="exppath", required=True,
                             help="file path to expression data")
    group_input.add_argument("--subquery", type=str, dest="subquery", default=None,
                             help="additional search term with gene name to select specific abstracts")
    group_input.add_argument("--synonym", type=bool, default=False, dest="synonym", choices=[True, False],
                             help="If want to consider synonyms for query genes, default=False (False or True)")
    group_input.add_argument("--organism", type=str, default='human', dest="org", choices=['human', 'mouse'],
                             help="If synonym is 1, name of organism (human or mouse), default=human")

if __name__ == '__main__':
    try:
        print "GCAM is running....."
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interruption! :D Bye!\n")
        sys.exit(0)